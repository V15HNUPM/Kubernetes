apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: flask-app
  labels:
    app: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      initContainers:
      - name: init-db
        image: busybox
        command: ['sh', '-c', 'if [ ! -f /app/data/database.db ]; then touch /app/data/database.db; fi']
        volumeMounts:
        - name: database-storage
          mountPath: /app/data
      containers:
      - name: flask-app
        image: v15hnupm/flask-app:latest
        ports:
        - containerPort: 5000
        env:
        - name: DB_NAME
          value: "/app/data/database.db"
        - name: SECRET_KEY
          value: "supersecret"
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: flask-app-config
              key: FLASK_APP
        - name: SQLALCHEMY_TRACK_MODIFICATIONS
          valueFrom:
            configMapKeyRef:
              name: flask-app-config
              key: SQLALCHEMY_TRACK_MODIFICATIONS
        volumeMounts:
        - name: database-storage
          mountPath: /app/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: database-storage
        persistentVolumeClaim:
          claimName: flask-app-db-pvc

